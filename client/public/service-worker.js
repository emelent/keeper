// Set this to true for production
let doCache = false

// Name our cache
let CACHE_NAME = 'demo-cache-v1'

// Delete old caches that are not our current one!
self.addEventListener("activate", event => {
	console.log('service-worker activate')
	const cacheWhitelist = [CACHE_NAME]
	event.waitUntil(
		caches.keys()
			.then(keyList =>
				Promise.all(keyList.map(key => {
					if (!cacheWhitelist.includes(key)) {
						console.log('Deleting cache: ' + key)
						return caches.delete(key)
					}
				}))
			)
	)
})

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener('install', (event) => {
	console.log('service-worker install')
	if (doCache) {
		event.waitUntil(
			caches.open(CACHE_NAME)
				.then((cache) => {
					// Get the assets manifest so we can see what our js file is named
					// This is because webpack hashes it
					fetch("asset-manifest.json")
						.then(response => {
							response.json()
						})
						.then(assets => {
							// Open a cache and cache our files
							// We want to cache the page and the main.js generated by webpack
							// We could also cache any static assets like CSS or images
							const urlsToCache = [
								"/",
								assets["main.js"]
							]
							cache.addAll(urlsToCache)
							console.log('cached')
						})
				})
		)
	}
  
	fetch('http://0.0.0.0:8999/products/all')
		.then(response => response.json())
		.then(products => {
			const indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB || window.shimIndexedDB
  
			const open = indexedDB.open('MyDb', 1)
			const storeName = 'ShopKeeperStore'
			//create schema
			open.onupgradeneeded = () =>{
				const db = open.result
				const store = db.createObjectStore(storeName, {keyPath: "id"})
				store.createIndex('products', [
					'id', 'name', 'brand', 'category', 'quantity', 'sell', 'buy'
				])
			}
  
			open.onsuccess = () => {
				//start a new transaction
				const db = open.result
				const tx = db.transaction(storeName, 'readwrite')
				const store = tx.objectStore(storeName)

				//add data
				products.forEach(product => store.put(product))
    
				//test retrieval
				const result = store.get(products[0].id)
				result.onsuccess = (stuff) => {
					console.log('args =>', stuff)
					console.log('result =>', result.result)
				}

				//close the db
				tx.oncomplete = () => db.close()
			}
		})
})

// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
self.addEventListener('fetch', (event) => {
	console.log('service-worker fetch')
	if (doCache) {
		event.respondWith(
			caches.match(event.request).then((response) => {
				return response || fetch(event.request)
			})
		)
	}
})
